{"version":3,"sources":["assets/icons/email-round.svg","assets/icons/fb-round.svg","assets/icons/linkedin-round.svg","assets/icons/github-round.svg","assets/bitmojis/surprise.png","assets/fonts/ShareTechMono.ttf","components/ContactSection/ContactSection.js","components/Navbar/Navbar.js","screens/intro/Intro.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ContactSection","className","href","src","EmailIcon","alt","target","FacebookIcon","LinkedinIcon","GithubIcon","Navbar","TitleWriter","descriptions","options","delay","deleteSpeed","wrapperClassName","cursorClassName","onInit","typewriter","typeString","pauseFor","deleteChars","length","start","IntroScreen","ProfilePicture","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yGAAAA,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,sC,+ICA3CD,EAAOC,QAAU,IAA0B,2C,wKC2B5BC,MAnBf,WACE,OACE,yBAAKC,UAAU,mBACb,uBAAGC,KAAK,gCACN,yBAAKC,IAAKC,IAAWC,IAAI,QAAQJ,UAAU,UAE7C,uBAAGC,KAAK,0CAA0CI,OAAO,UACvD,yBAAKH,IAAKI,IAAcF,IAAI,WAAWJ,UAAU,UAEnD,uBAAGC,KAAK,yCAAyCI,OAAO,UACtD,yBAAKH,IAAKK,IAAcH,IAAI,WAAWJ,UAAU,UAEnD,uBAAGC,KAAK,+BAA+BI,OAAO,UAC5C,yBAAKH,IAAKM,IAAYJ,IAAI,SAASJ,UAAU,Y,MCEtCS,MAnBf,WACE,OACE,yBAAKT,UAAU,UACb,uBAAGC,KAAK,qBAAR,QAGA,uBAAGA,KAAK,qBAAR,SAGA,uBAAGA,KAAK,qBAAR,cAGA,uBAAGA,KAAK,qBAAR,c,sBCKN,SAASS,IACP,IACMC,EAAe,CAAC,WAAY,aAAc,yBAChD,OACE,kBAAC,IAAD,CACEC,QAAS,CACPC,MAAO,GACPC,YAAa,GACbC,iBAAkB,eAClBC,gBAAiB,mCAEnBC,OAAQ,SAAAC,GACNA,EACGC,WAAW,wBACXC,SAAS,KACTD,WAHH,sCAIGC,SAAS,KACTD,WAAW,QACXC,SAAS,KACTD,WAlBW,UAoBXA,WAAWR,EAAa,IACxBS,SAAS,KACTC,YAAYV,EAAa,GAAGW,QAC5BF,SAAS,KAETD,WAAWR,EAAa,IACxBS,SAAS,KACTC,YAAYV,EAAa,GAAGW,QAC5BF,SAAS,KAETD,WAAWR,EAAa,IACxBS,SAAS,KACTC,YAhCW,SAgCgBC,OAASX,EAAa,GAAGW,QACpDF,SAAS,KAETD,WAAW,uBACXI,WAMIC,MAzDf,WACE,OACE,yBAAKxB,UAAU,SACb,yBAAKA,UAAU,QACb,kBAACU,EAAD,OAEF,yBAAKV,UAAU,QACb,yBAAKE,IAAKuB,IAAgBrB,IAAI,kBAAkBJ,UAAU,oBAC1D,kBAAC,EAAD,S,MCCO0B,MAVf,WACE,OACE,yBAAK1B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCc2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ee38221f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/email-round.af6134f2.svg\";","module.exports = __webpack_public_path__ + \"static/media/fb-round.51f42ec5.svg\";","module.exports = __webpack_public_path__ + \"static/media/linkedin-round.8cc2d3a8.svg\";","module.exports = __webpack_public_path__ + \"static/media/github-round.1bb02710.svg\";","module.exports = __webpack_public_path__ + \"static/media/surprise.cefba2dc.png\";","module.exports = __webpack_public_path__ + \"static/media/ShareTechMono.972d54ac.ttf\";","import React from 'react';\r\nimport './ContactSection.scss';\r\nimport EmailIcon from '../../assets/icons/email-round.svg';\r\nimport FacebookIcon from '../../assets/icons/fb-round.svg';\r\nimport LinkedinIcon from '../../assets/icons/linkedin-round.svg';\r\nimport GithubIcon from '../../assets/icons/github-round.svg';\r\n\r\n// holds display order of each view and icons\r\nfunction ContactSection() {\r\n  return (\r\n    <div className=\"contact-section\">\r\n      <a href='mailto:webmaster@example.com'>\r\n        <img src={EmailIcon} alt='Email' className='icon' />\r\n      </a>\r\n      <a href='https://www.facebook.com/xev.amadore.5/' target='_blank'>\r\n        <img src={FacebookIcon} alt='Facebook' className='icon' />\r\n      </a>\r\n      <a href='https://www.linkedin.com/in/brucejh99/' target='_blank'>\r\n        <img src={LinkedinIcon} alt='Linkedin' className='icon' />\r\n      </a>\r\n      <a href='https://github.com/brucejh99' target='_blank'>\r\n        <img src={GithubIcon} alt='Github' className='icon' />\r\n      </a>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ContactSection;\r\n","import React from 'react';\r\nimport './Navbar.scss';\r\n\r\n// holds display order of each view and icons\r\nfunction Navbar() {\r\n  return (\r\n    <div className=\"navbar\">\r\n      <a href='www.brucehong.com'>\r\n        Home\r\n      </a>\r\n      <a href='www.brucehong.com'>\r\n        About\r\n      </a> \r\n      <a href='www.brucehong.com'>\r\n        Experience\r\n      </a>\r\n      <a href='www.brucehong.com'>\r\n        Projects\r\n      </a>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\nimport Typewriter from 'typewriter-effect';\r\nimport { ContactSection } from '../../components';\r\nimport ProfilePicture from '../../assets/bitmojis/surprise.png';\r\nimport './Intro.scss';\r\n\r\n\r\nfunction IntroScreen() {\r\n  return (\r\n    <div className=\"intro\">\r\n      <div className=\"half\">\r\n        <TitleWriter />\r\n      </div>\r\n      <div className=\"half\">\r\n        <img src={ProfilePicture} alt='Profile picture' className='profile-picture' />\r\n        <ContactSection />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction TitleWriter() {\r\n  const preDescription = `I'm a `;\r\n  const descriptions = ['student.', 'developer.', 'waterbottle designer.'];\r\n  return (\r\n    <Typewriter\r\n      options={{\r\n        delay: 75,\r\n        deleteSpeed: 30,\r\n        wrapperClassName: 'title-writer',\r\n        cursorClassName: 'Typewriter__cursor title-writer',\r\n      }}\r\n      onInit={typewriter => {\r\n        typewriter\r\n          .typeString('<strong>Hey,<strong>')\r\n          .pauseFor(250)\r\n          .typeString(`<strong> my name is Bruce.<strong>`)\r\n          .pauseFor(250)\r\n          .typeString('<br>')\r\n          .pauseFor(400)\r\n          .typeString(preDescription)\r\n\r\n          .typeString(descriptions[0])\r\n          .pauseFor(500)\r\n          .deleteChars(descriptions[0].length)\r\n          .pauseFor(250)\r\n\r\n          .typeString(descriptions[1])\r\n          .pauseFor(500)\r\n          .deleteChars(descriptions[1].length)\r\n          .pauseFor(250)\r\n          \r\n          .typeString(descriptions[2])\r\n          .pauseFor(500)\r\n          .deleteChars(preDescription.length + descriptions[2].length)\r\n          .pauseFor(500)\r\n\r\n          .typeString('Welcome to my site!')\r\n          .start();\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default IntroScreen;\r\n","import React from 'react';\nimport { IntroScreen } from './screens';\nimport { Navbar } from './components';\nimport './App.scss';\n\n// holds display order of each view and icons\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Navbar />\n      <IntroScreen />\n      <IntroScreen />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// fonts\nimport './assets/fonts/ShareTechMono.ttf';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}